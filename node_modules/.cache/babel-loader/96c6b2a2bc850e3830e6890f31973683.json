{"ast":null,"code":"import TileObject from \"./tile\";\nexport default class BoardObject {\n  constructor() {\n    this.boardState = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].flatMap(i => new TileObject(i, i));\n  } // Fisher-Yates shuffle algorithm\n\n\n  scrambleTiles() {\n    const boardTiles = [...this.boardState];\n    let currentIndex = boardTiles.length,\n        placeholderTile,\n        randomIndex; // While elements exist to shuffle\n\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex--); // Change board tile indeces\n\n      boardTiles[currentIndex].setPosition(randomIndex);\n      boardTiles[randomIndex].setPosition(currentIndex); // Swap board tile positions in boardState list\n\n      placeholderTile = boardTiles[currentIndex];\n      boardTiles[currentIndex] = boardTiles[randomIndex];\n      boardTiles[randomIndex] = placeholderTile;\n    }\n\n    this.boardState = boardTiles;\n  }\n\n  detectEmpty(tile) {\n    if (tile.number === 0) {\n      return true;\n    }\n  }\n\n  setTileImmediateMovable(iArray) {\n    iArray.forEach(i => {\n      if (this.detectEmpty(boardState[i])) {\n        tile.setImmediateMovable(true);\n        return;\n      } else {\n        tile.setImmediateMovable(false);\n      }\n    });\n  } // Determine movability\n\n\n  setMovableTiles() {\n    this.boardState.forEach(tile => {\n      switch (tile.position) {\n        case 0:\n          this.setTileImmediateMovable([1, 4]);\n\n          if (this.detectEmpty(boardState[1] || this.detectEmpty(boardState[4]))) {\n            tile.setImmediateMovable(true);\n          } else {\n            tile.setImmediateMovable(false);\n          }\n\n          if (this.detectEmpty(boardState[4] || this.detectEmpty(boardState[8] || this.detectEmpty(boardState[12])))) {\n            tile.setColumnMovable(true);\n          } else {\n            tile.setColumnMovable(false);\n          }\n\n          if (this.detectEmpty(boardState[1] || this.detectEmpty(boardState[2] || this.detectEmpty(boardState[3])))) {\n            tile.setRowMovable(true);\n          } else {\n            tile.setRowMovable(false);\n          }\n\n          break;\n\n        case 1:\n          if (this.detectEmpty(boardState[0] || this.detectEmpty(boardState[2]) || this.detectEmpty(boardState[5]))) {\n            tile.setImmediateMovable(true);\n          } else {\n            tile.setImmediateMovable(false);\n          }\n\n          if (this.detectEmpty(boardState[5] || this.detectEmpty(boardState[9] || this.detectEmpty(boardState[13])))) {\n            tile.setColumnMovable(true);\n          } else {\n            tile.setColumnMovable(false);\n          }\n\n          if (this.detectEmpty(boardState[0] || this.detectEmpty(boardState[2] || this.detectEmpty(boardState[3])))) {\n            tile.setRowMovable(true);\n          } else {\n            tile.setRowMovable(false);\n          }\n\n          break;\n\n        case 2:\n          break;\n\n        case 3:\n          break;\n\n        case 4:\n          break;\n\n        case 5:\n          break;\n\n        case 6:\n          break;\n\n        case 7:\n          break;\n\n        case 8:\n          break;\n\n        case 9:\n          break;\n\n        case 10:\n          break;\n\n        case 11:\n          break;\n\n        case 12:\n          break;\n\n        case 13:\n          break;\n\n        case 14:\n          break;\n\n        case 15:\n          break;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/alynux/GitHub/fifteen-puzzle/src/classes/board.js"],"names":["TileObject","BoardObject","constructor","boardState","flatMap","i","scrambleTiles","boardTiles","currentIndex","length","placeholderTile","randomIndex","Math","floor","random","setPosition","detectEmpty","tile","number","setTileImmediateMovable","iArray","forEach","setImmediateMovable","setMovableTiles","position","setColumnMovable","setRowMovable"],"mappings":"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","sourcesContent":["import TileObject from \"./tile\";\n\nexport default class BoardObject {\n  constructor() {\n    this.boardState = [\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    ].flatMap((i) => new TileObject(i, i));\n  }\n\n  // Fisher-Yates shuffle algorithm\n  scrambleTiles() {\n    const boardTiles = [...this.boardState];\n    let currentIndex = boardTiles.length,\n      placeholderTile,\n      randomIndex;\n\n    // While elements exist to shuffle\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex--);\n\n      // Change board tile indeces\n      boardTiles[currentIndex].setPosition(randomIndex);\n      boardTiles[randomIndex].setPosition(currentIndex);\n\n      // Swap board tile positions in boardState list\n      placeholderTile = boardTiles[currentIndex];\n      boardTiles[currentIndex] = boardTiles[randomIndex];\n      boardTiles[randomIndex] = placeholderTile;\n    }\n\n    this.boardState = boardTiles;\n  }\n\n  detectEmpty(tile) {\n    if (tile.number === 0) {\n      return true;\n    }\n  }\n\n  setTileImmediateMovable(iArray) {\n    iArray.forEach((i) => {\n      if (this.detectEmpty(boardState[i])) {\n        tile.setImmediateMovable(true);\n        return;\n      } else {\n        tile.setImmediateMovable(false);\n      }\n    });\n  }\n\n  // Determine movability\n  setMovableTiles() {\n    this.boardState.forEach((tile) => {\n      switch (tile.position) {\n        case 0:\n          this.setTileImmediateMovable([1, 4]);\n          if (\n            this.detectEmpty(boardState[1] || this.detectEmpty(boardState[4]))\n          ) {\n            tile.setImmediateMovable(true);\n          } else {\n            tile.setImmediateMovable(false);\n          }\n          if (\n            this.detectEmpty(\n              boardState[4] ||\n                this.detectEmpty(\n                  boardState[8] || this.detectEmpty(boardState[12])\n                )\n            )\n          ) {\n            tile.setColumnMovable(true);\n          } else {\n            tile.setColumnMovable(false);\n          }\n          if (\n            this.detectEmpty(\n              boardState[1] ||\n                this.detectEmpty(\n                  boardState[2] || this.detectEmpty(boardState[3])\n                )\n            )\n          ) {\n            tile.setRowMovable(true);\n          } else {\n            tile.setRowMovable(false);\n          }\n          break;\n        case 1:\n          if (\n            this.detectEmpty(\n              boardState[0] ||\n                this.detectEmpty(boardState[2]) ||\n                this.detectEmpty(boardState[5])\n            )\n          ) {\n            tile.setImmediateMovable(true);\n          } else {\n            tile.setImmediateMovable(false);\n          }\n          if (\n            this.detectEmpty(\n              boardState[5] ||\n                this.detectEmpty(\n                  boardState[9] || this.detectEmpty(boardState[13])\n                )\n            )\n          ) {\n            tile.setColumnMovable(true);\n          } else {\n            tile.setColumnMovable(false);\n          }\n          if (\n            this.detectEmpty(\n              boardState[0] ||\n                this.detectEmpty(\n                  boardState[2] || this.detectEmpty(boardState[3])\n                )\n            )\n          ) {\n            tile.setRowMovable(true);\n          } else {\n            tile.setRowMovable(false);\n          }\n          break;\n        case 2:\n          break;\n        case 3:\n          break;\n        case 4:\n          break;\n        case 5:\n          break;\n        case 6:\n          break;\n        case 7:\n          break;\n        case 8:\n          break;\n        case 9:\n          break;\n        case 10:\n          break;\n        case 11:\n          break;\n        case 12:\n          break;\n        case 13:\n          break;\n        case 14:\n          break;\n        case 15:\n          break;\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}