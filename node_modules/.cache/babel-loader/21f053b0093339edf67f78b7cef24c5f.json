{"ast":null,"code":"var _jsxFileName = \"/home/alynux/GitHub/fifteen-puzzle/src/components/GridSquare.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gridSquareStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  width: \"75px\",\n  height: \"75px\",\n  boxShadow: \"1px 1px 5px purple\",\n  backgroundColor: \"#98c2d0\",\n  color: \"white\",\n  fontFamily: \"sans-serif\",\n  fontSize: \"18px\"\n};\nconst gridSquareHoverStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  width: \"75px\",\n  height: \"75px\",\n  boxShadow: \"1px 1px 5px purple\",\n  border: \"none\",\n  backgroundColor: \"#cdeafb\",\n  color: \"white\",\n  fontFamily: \"sans-serif\",\n  fontSize: \"18px\"\n};\nconst gridSquareMovableStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  width: \"75px\",\n  height: \"75px\",\n  border: \"none\",\n  boxShadow: \"1px 1px 5px purple\",\n  backgroundColor: \"#b0ddf8\",\n  color: \"white\",\n  fontFamily: \"sans-serif\",\n  fontSize: \"18px\"\n};\n\nconst GridSquare = _ref => {\n  _s();\n\n  let {\n    tile,\n    mutableGame,\n    setGameState\n  } = _ref;\n  const [intendToMove, setIntendToMove] = useState(false);\n\n  const immediateMove = () => {\n    // Function for moving tiles that are immediately adjacent to the empty tile\n    mutableGame.board.immediateMove(tile);\n    setGameState([...mutableGame.board.boardState]);\n  };\n\n  const complexMove = () => {\n    // Function for moving tiles involving pushing more than one block\n    mutableGame.board.complexMove(tile);\n    setGameState([...mutableGame.board.boardState]);\n  };\n\n  const hoverHighlight = (tile, tf) => {// Function for highlighting tiles that would move upon hover\n    // mutableGame.board.complexIntendToMove(tile, tf);\n    // setGameState([...mutableGame.board.boardState]);\n  };\n\n  if (tile.number === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: gridSquareStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }, this);\n  } else if (tile.immediateMovable || tile.columnMovable || tile.rowMovable) {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: tile.immediateMovable ? immediateMove : complexMove,\n      style: intendToMove ? gridSquareHoverStyle : gridSquareMovableStyle,\n      onMouseEnter: () => setIntendToMove(true),\n      onMouseLeave: () => setIntendToMove(false),\n      children: tile.number\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: gridSquareStyle,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: tile.number\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(GridSquare, \"6eP+qjxc9K5GIS4ZNqMdnkk6gf4=\");\n\n_c = GridSquare;\nexport default GridSquare;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridSquare\");","map":{"version":3,"sources":["/home/alynux/GitHub/fifteen-puzzle/src/components/GridSquare.tsx"],"names":["React","useState","gridSquareStyle","display","flexDirection","justifyContent","textAlign","width","height","boxShadow","backgroundColor","color","fontFamily","fontSize","gridSquareHoverStyle","border","gridSquareMovableStyle","GridSquare","tile","mutableGame","setGameState","intendToMove","setIntendToMove","immediateMove","board","boardState","complexMove","hoverHighlight","tf","number","immediateMovable","columnMovable","rowMovable"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst gridSquareStyle: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  width: \"75px\",\n  height: \"75px\",\n  boxShadow: \"1px 1px 5px purple\",\n  backgroundColor: \"#98c2d0\",\n  color: \"white\",\n  fontFamily: \"sans-serif\",\n  fontSize: \"18px\",\n};\n\nconst gridSquareHoverStyle: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  width: \"75px\",\n  height: \"75px\",\n  boxShadow: \"1px 1px 5px purple\",\n  border: \"none\",\n  backgroundColor: \"#cdeafb\",\n  color: \"white\",\n  fontFamily: \"sans-serif\",\n  fontSize: \"18px\",\n};\n\nconst gridSquareMovableStyle: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  width: \"75px\",\n  height: \"75px\",\n  border: \"none\",\n  boxShadow: \"1px 1px 5px purple\",\n  backgroundColor: \"#b0ddf8\",\n  color: \"white\",\n  fontFamily: \"sans-serif\",\n  fontSize: \"18px\",\n};\n\nexport type GridSquareData = {\n  tile: any;\n  mutableGame: any;\n  setGameState: any;\n};\n\nconst GridSquare = ({ tile, mutableGame, setGameState }: GridSquareData) => {\n  const [intendToMove, setIntendToMove] = useState(false);\n\n  const immediateMove = () => {\n    // Function for moving tiles that are immediately adjacent to the empty tile\n    mutableGame.board.immediateMove(tile);\n    setGameState([...mutableGame.board.boardState]);\n  };\n\n  const complexMove = () => {\n    // Function for moving tiles involving pushing more than one block\n    mutableGame.board.complexMove(tile);\n    setGameState([...mutableGame.board.boardState]);\n  };\n\n  const hoverHighlight = (tile: any, tf: boolean) => {\n    // Function for highlighting tiles that would move upon hover\n    // mutableGame.board.complexIntendToMove(tile, tf);\n    // setGameState([...mutableGame.board.boardState]);\n  };\n\n  if (tile.number === 0) {\n    return <div style={gridSquareStyle}></div>;\n  } else if (tile.immediateMovable || tile.columnMovable || tile.rowMovable) {\n    return (\n      <button\n        onClick={tile.immediateMovable ? immediateMove : complexMove}\n        style={intendToMove ? gridSquareHoverStyle : gridSquareMovableStyle}\n        onMouseEnter={() => setIntendToMove(true)}\n        onMouseLeave={() => setIntendToMove(false)}\n      >\n        {tile.number}\n      </button>\n    );\n  } else {\n    return (\n      <div style={gridSquareStyle}>\n        <p>{tile.number}</p>\n      </div>\n    );\n  }\n};\n\nexport default GridSquare;\n"]},"metadata":{},"sourceType":"module"}