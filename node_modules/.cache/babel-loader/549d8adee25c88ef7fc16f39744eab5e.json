{"ast":null,"code":"import TileObject from \"./tile\";\nexport default class BoardObject {\n  constructor() {\n    this.boardState = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].flatMap(i => new TileObject(i, i));\n  } // Fisher-Yates shuffle algorithm\n\n\n  scrambleTiles() {\n    const boardTiles = [...this.boardState];\n    let currentIndex = boardTiles.length,\n        placeholderTile,\n        randomIndex; // While elements exist to shuffle\n\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex--); // Change board tile indeces\n\n      boardTiles[currentIndex].setPosition(randomIndex);\n      boardTiles[randomIndex].setPosition(currentIndex); // Swap board tile positions in boardState list\n\n      placeholderTile = boardTiles[currentIndex];\n      boardTiles[currentIndex] = boardTiles[randomIndex];\n      boardTiles[randomIndex] = placeholderTile;\n    }\n\n    this.boardState = boardTiles;\n  }\n\n  detectMovableTiles() {\n    const boardTiles = [...this.boardState];\n    const emptyTile = boardTiles.find(tile => tile.empty);\n    let immediateMovableTiles;\n    let columnMovableTiles;\n    let rowMovableTiles;\n\n    switch (emptyTile.position) {\n      case 0:\n        immediateMovableTiles = [1, 4];\n        columnMovableTiles = [4, 8, 12];\n        rowMovableTiles = [1, 2, 3];\n        break;\n\n      case 1:\n        immediateMovableTiles = [0, 2, 5];\n        columnMovableTiles = [5, 9, 13];\n        rowMovableTiles = [0, 2, 3];\n        break;\n\n      case 2:\n        immediateMovableTiles = [1, 3, 6];\n        columnMovableTiles = [6, 10, 14];\n        rowMovableTiles = [0, 1, 3];\n        break;\n\n      case 3:\n        immediateMovableTiles = [2, 7];\n        columnMovableTiles = [7, 11, 15];\n        rowMovableTiles = [0, 1, 2];\n        break;\n\n      case 4:\n        immediateMovableTiles = [0, 5, 8];\n        columnMovableTiles = [0, 8, 12];\n        rowMovableTiles = [5, 6, 7];\n        break;\n\n      case 5:\n        immediateMovableTiles = [1, 4, 6, 9];\n        columnMovableTiles = [1, 9, 13];\n        rowMovableTiles = [4, 6, 7];\n        break;\n\n      case 6:\n        immediateMovableTiles = [2, 5, 7, 10];\n        columnMovableTiles = [2, 10, 14];\n        rowMovableTiles = [4, 5, 7];\n        break;\n\n      case 7:\n        immediateMovableTiles = [3, 6, 11];\n        columnMovableTiles = [3, 11, 15];\n        rowMovableTiles = [4, 5, 6];\n        break;\n\n      case 8:\n        immediateMovableTiles = [4, 9, 12];\n        columnMovableTiles = [0, 4, 12];\n        rowMovableTiles = [9, 10, 11];\n        break;\n\n      case 9:\n        immediateMovableTiles = [5, 8, 10, 13];\n        columnMovableTiles = [1, 5, 13];\n        rowMovableTiles = [8, 10, 11];\n        break;\n\n      case 10:\n        immediateMovableTiles = [6, 9, 11, 14];\n        columnMovableTiles = [2, 6, 14];\n        rowMovableTiles = [8, 9, 11];\n        break;\n\n      case 11:\n        immediateMovableTiles = [7, 10, 15];\n        columnMovableTiles = [3, 7, 15];\n        rowMovableTiles = [8, 9, 10];\n        break;\n\n      case 12:\n        immediateMovableTiles = [8, 13];\n        columnMovableTiles = [0, 4, 8];\n        rowMovableTiles = [13, 14, 15];\n        break;\n\n      case 13:\n        immediateMovableTiles = [9, 12, 14];\n        columnMovableTiles = [1, 5, 9];\n        rowMovableTiles = [12, 14, 15];\n        break;\n\n      case 14:\n        immediateMovableTiles = [10, 13, 15];\n        columnMovableTiles = [2, 6, 10];\n        rowMovableTiles = [12, 13, 15];\n        break;\n\n      case 15:\n        immediateMovableTiles = [11, 14];\n        columnMovableTiles = [3, 7, 11];\n        rowMovableTiles = [12, 13, 14];\n        break;\n    }\n\n    return {\n      immediateMovableTiles: immediateMovableTiles,\n      columnMovableTiles: columnMovableTiles,\n      rowMovableTiles: columnMovableTiles\n    };\n  }\n\n  setMovableTiles() {\n    const movableTiles = this.detectMovableTiles();\n    this.boardState.map(tile => {\n      movableTiles.immediateMovableTiles.forEach(i => {\n        if (tile.position === i) {\n          const replacementTile = tile.clone();\n          tile.immediateMovable = true;\n        }\n\n        movableTiles.columnMovableTiles.forEach(i => {\n          if (tile.position === i) {\n            const replacementTile = tile.clone();\n            tile.columnMovable = true;\n          }\n        });\n        movableTiles.rowMovableTiles.forEach(i => {\n          if (tile.position === i) {\n            const replacementTile = tile.clone();\n            tile.rowMovable = true;\n          }\n        });\n      });\n    });\n  }\n\n  setTileImmediateMovable(tile, indices) {\n    // Use every, which behaves like forEach but stops iterating when a falsy value gets returned\n    indices.every(i => {\n      if (this.boardState[i].empty) {\n        tile.setImmediateMovable(true);\n        return 0;\n      } else {\n        tile.setImmediateMovable(false);\n      }\n    });\n  }\n\n  setTileColumnMovable(tile, indices) {\n    indices.every(i => {\n      if (this.boardState[i].empty) {\n        tile.setColumnMovable(true);\n        return 0;\n      } else {\n        tile.setColumnMovable(false);\n      }\n    });\n  }\n\n  setTileRowMovable(tile, indices) {\n    indices.every(i => {\n      if (this.boardState[i].empty) {\n        tile.setRowMovable(true);\n        return 0;\n      } else {\n        tile.setRowMovable(false);\n      }\n    });\n  } // Determine movability\n\n\n  setMovableTiles() {\n    this.boardState.forEach(tile => {\n      switch (tile.position) {\n        case 0:\n          this.setTileImmediateMovable(tile, [1, 4]);\n          this.setTileColumnMovable(tile, [4, 8, 12]);\n          this.setTileRowMovable(tile, [1, 2, 3]);\n          break;\n\n        case 1:\n          this.setTileImmediateMovable(tile, [0, 2, 5]);\n          this.setTileColumnMovable(tile, [5, 9, 13]);\n          this.setTileRowMovable(tile, [0, 2, 3]);\n          break;\n\n        case 2:\n          this.setTileImmediateMovable(tile, [1, 3, 6]);\n          this.setTileColumnMovable(tile, [6, 10, 14]);\n          this.setTileRowMovable(tile, [0, 1, 3]);\n          break;\n\n        case 3:\n          this.setTileImmediateMovable(tile, [2, 7]);\n          this.setTileColumnMovable(tile, [7, 11, 15]);\n          this.setTileRowMovable(tile, [0, 1, 2]);\n          break;\n\n        case 4:\n          this.setTileImmediateMovable(tile, [0, 5, 8]);\n          this.setTileColumnMovable(tile, [0, 8, 12]);\n          this.setTileRowMovable(tile, [5, 6, 7]);\n          break;\n\n        case 5:\n          this.setTileImmediateMovable(tile, [1, 4, 6, 9]);\n          this.setTileColumnMovable(tile, [1, 9, 13]);\n          this.setTileRowMovable(tile, [4, 6, 7]);\n          break;\n\n        case 6:\n          this.setTileImmediateMovable(tile, [2, 5, 7, 10]);\n          this.setTileColumnMovable(tile, [2, 10, 14]);\n          this.setTileRowMovable(tile, [4, 5, 7]);\n          break;\n\n        case 7:\n          this.setTileImmediateMovable(tile, [3, 6, 11]);\n          this.setTileColumnMovable(tile, [3, 11, 15]);\n          this.setTileRowMovable(tile, [4, 5, 6]);\n          break;\n\n        case 8:\n          this.setTileImmediateMovable(tile, [4, 9, 12]);\n          this.setTileColumnMovable(tile, [0, 4, 12]);\n          this.setTileRowMovable(tile, [9, 10, 11]);\n          break;\n\n        case 9:\n          this.setTileImmediateMovable(tile, [5, 8, 10, 13]);\n          this.setTileColumnMovable(tile, [1, 5, 13]);\n          this.setTileRowMovable(tile, [8, 10, 11]);\n          break;\n\n        case 10:\n          this.setTileImmediateMovable(tile, [6, 9, 11, 14]);\n          this.setTileColumnMovable(tile, [2, 6, 14]);\n          this.setTileRowMovable(tile, [8, 9, 11]);\n          break;\n\n        case 11:\n          this.setTileImmediateMovable(tile, [7, 10, 15]);\n          this.setTileColumnMovable(tile, [3, 7, 15]);\n          this.setTileRowMovable(tile, [8, 9, 10]);\n          break;\n\n        case 12:\n          this.setTileImmediateMovable(tile, [8, 13]);\n          this.setTileColumnMovable(tile, [0, 4, 8]);\n          this.setTileRowMovable(tile, [13, 14, 15]);\n          break;\n\n        case 13:\n          this.setTileImmediateMovable(tile, [9, 12, 14]);\n          this.setTileColumnMovable(tile, [1, 5, 9]);\n          this.setTileRowMovable(tile, [12, 14, 15]);\n          break;\n\n        case 14:\n          this.setTileImmediateMovable(tile, [10, 13, 15]);\n          this.setTileColumnMovable(tile, [2, 6, 10]);\n          this.setTileRowMovable(tile, [12, 13, 15]);\n          break;\n\n        case 15:\n          this.setTileImmediateMovable(tile, [11, 14]);\n          this.setTileColumnMovable(tile, [3, 7, 11]);\n          this.setTileRowMovable(tile, [12, 13, 14]);\n          break;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/alynux/GitHub/fifteen-puzzle/src/classes/board.js"],"names":["TileObject","BoardObject","constructor","boardState","flatMap","i","scrambleTiles","boardTiles","currentIndex","length","placeholderTile","randomIndex","Math","floor","random","setPosition","detectMovableTiles","emptyTile","find","tile","empty","immediateMovableTiles","columnMovableTiles","rowMovableTiles","position","setMovableTiles","movableTiles","map","forEach","replacementTile","clone","immediateMovable","columnMovable","rowMovable","setTileImmediateMovable","indices","every","setImmediateMovable","setTileColumnMovable","setColumnMovable","setTileRowMovable","setRowMovable"],"mappings":"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","sourcesContent":["import TileObject from \"./tile\";\n\nexport default class BoardObject {\n  constructor() {\n    this.boardState = [\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    ].flatMap((i) => new TileObject(i, i));\n  }\n\n  // Fisher-Yates shuffle algorithm\n  scrambleTiles() {\n    const boardTiles = [...this.boardState];\n    let currentIndex = boardTiles.length,\n      placeholderTile,\n      randomIndex;\n\n    // While elements exist to shuffle\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex--);\n\n      // Change board tile indeces\n      boardTiles[currentIndex].setPosition(randomIndex);\n      boardTiles[randomIndex].setPosition(currentIndex);\n\n      // Swap board tile positions in boardState list\n      placeholderTile = boardTiles[currentIndex];\n      boardTiles[currentIndex] = boardTiles[randomIndex];\n      boardTiles[randomIndex] = placeholderTile;\n    }\n\n    this.boardState = boardTiles;\n  }\n\n  detectMovableTiles() {\n    const boardTiles = [...this.boardState];\n    const emptyTile = boardTiles.find((tile) => tile.empty);\n    let immediateMovableTiles;\n    let columnMovableTiles;\n    let rowMovableTiles;\n\n    switch (emptyTile.position) {\n      case 0:\n        immediateMovableTiles = [1, 4];\n        columnMovableTiles = [4, 8, 12];\n        rowMovableTiles = [1, 2, 3];\n        break;\n      case 1:\n        immediateMovableTiles = [0, 2, 5];\n        columnMovableTiles = [5, 9, 13];\n        rowMovableTiles = [0, 2, 3];\n        break;\n      case 2:\n        immediateMovableTiles = [1, 3, 6];\n        columnMovableTiles = [6, 10, 14];\n        rowMovableTiles = [0, 1, 3];\n        break;\n      case 3:\n        immediateMovableTiles = [2, 7];\n        columnMovableTiles = [7, 11, 15];\n        rowMovableTiles = [0, 1, 2];\n        break;\n      case 4:\n        immediateMovableTiles = [0, 5, 8];\n        columnMovableTiles = [0, 8, 12];\n        rowMovableTiles = [5, 6, 7];\n        break;\n      case 5:\n        immediateMovableTiles = [1, 4, 6, 9];\n        columnMovableTiles = [1, 9, 13];\n        rowMovableTiles = [4, 6, 7];\n        break;\n      case 6:\n        immediateMovableTiles = [2, 5, 7, 10];\n        columnMovableTiles = [2, 10, 14];\n        rowMovableTiles = [4, 5, 7];\n        break;\n      case 7:\n        immediateMovableTiles = [3, 6, 11];\n        columnMovableTiles = [3, 11, 15];\n        rowMovableTiles = [4, 5, 6];\n        break;\n      case 8:\n        immediateMovableTiles = [4, 9, 12];\n        columnMovableTiles = [0, 4, 12];\n        rowMovableTiles = [9, 10, 11];\n        break;\n      case 9:\n        immediateMovableTiles = [5, 8, 10, 13];\n        columnMovableTiles = [1, 5, 13];\n        rowMovableTiles = [8, 10, 11];\n        break;\n      case 10:\n        immediateMovableTiles = [6, 9, 11, 14];\n        columnMovableTiles = [2, 6, 14];\n        rowMovableTiles = [8, 9, 11];\n        break;\n      case 11:\n        immediateMovableTiles = [7, 10, 15];\n        columnMovableTiles = [3, 7, 15];\n        rowMovableTiles = [8, 9, 10];\n        break;\n      case 12:\n        immediateMovableTiles = [8, 13];\n        columnMovableTiles = [0, 4, 8];\n        rowMovableTiles = [13, 14, 15];\n        break;\n      case 13:\n        immediateMovableTiles = [9, 12, 14];\n        columnMovableTiles = [1, 5, 9];\n        rowMovableTiles = [12, 14, 15];\n        break;\n      case 14:\n        immediateMovableTiles = [10, 13, 15];\n        columnMovableTiles = [2, 6, 10];\n        rowMovableTiles = [12, 13, 15];\n        break;\n      case 15:\n        immediateMovableTiles = [11, 14];\n        columnMovableTiles = [3, 7, 11];\n        rowMovableTiles = [12, 13, 14];\n        break;\n    }\n    return {\n      immediateMovableTiles: immediateMovableTiles,\n      columnMovableTiles: columnMovableTiles,\n      rowMovableTiles: columnMovableTiles,\n    };\n  }\n\n  setMovableTiles() {\n    const movableTiles = this.detectMovableTiles();\n    this.boardState.map((tile) => {\n      movableTiles.immediateMovableTiles.forEach((i) => {\n        if (tile.position === i) {\n          const replacementTile = tile.clone();\n          tile.immediateMovable = true;\n        }\n        movableTiles.columnMovableTiles.forEach((i) => {\n          if (tile.position === i) {\n            const replacementTile = tile.clone();\n            tile.columnMovable = true;\n          }\n        });\n        movableTiles.rowMovableTiles.forEach((i) => {\n          if (tile.position === i) {\n            const replacementTile = tile.clone();\n            tile.rowMovable = true;\n          }\n        });\n      });\n    });\n  }\n\n  setTileImmediateMovable(tile, indices) {\n    // Use every, which behaves like forEach but stops iterating when a falsy value gets returned\n    indices.every((i) => {\n      if (this.boardState[i].empty) {\n        tile.setImmediateMovable(true);\n        return 0;\n      } else {\n        tile.setImmediateMovable(false);\n      }\n    });\n  }\n\n  setTileColumnMovable(tile, indices) {\n    indices.every((i) => {\n      if (this.boardState[i].empty) {\n        tile.setColumnMovable(true);\n        return 0;\n      } else {\n        tile.setColumnMovable(false);\n      }\n    });\n  }\n\n  setTileRowMovable(tile, indices) {\n    indices.every((i) => {\n      if (this.boardState[i].empty) {\n        tile.setRowMovable(true);\n        return 0;\n      } else {\n        tile.setRowMovable(false);\n      }\n    });\n  }\n\n  // Determine movability\n  setMovableTiles() {\n    this.boardState.forEach((tile) => {\n      switch (tile.position) {\n        case 0:\n          this.setTileImmediateMovable(tile, [1, 4]);\n          this.setTileColumnMovable(tile, [4, 8, 12]);\n          this.setTileRowMovable(tile, [1, 2, 3]);\n          break;\n        case 1:\n          this.setTileImmediateMovable(tile, [0, 2, 5]);\n          this.setTileColumnMovable(tile, [5, 9, 13]);\n          this.setTileRowMovable(tile, [0, 2, 3]);\n          break;\n        case 2:\n          this.setTileImmediateMovable(tile, [1, 3, 6]);\n          this.setTileColumnMovable(tile, [6, 10, 14]);\n          this.setTileRowMovable(tile, [0, 1, 3]);\n          break;\n        case 3:\n          this.setTileImmediateMovable(tile, [2, 7]);\n          this.setTileColumnMovable(tile, [7, 11, 15]);\n          this.setTileRowMovable(tile, [0, 1, 2]);\n          break;\n        case 4:\n          this.setTileImmediateMovable(tile, [0, 5, 8]);\n          this.setTileColumnMovable(tile, [0, 8, 12]);\n          this.setTileRowMovable(tile, [5, 6, 7]);\n          break;\n        case 5:\n          this.setTileImmediateMovable(tile, [1, 4, 6, 9]);\n          this.setTileColumnMovable(tile, [1, 9, 13]);\n          this.setTileRowMovable(tile, [4, 6, 7]);\n          break;\n        case 6:\n          this.setTileImmediateMovable(tile, [2, 5, 7, 10]);\n          this.setTileColumnMovable(tile, [2, 10, 14]);\n          this.setTileRowMovable(tile, [4, 5, 7]);\n          break;\n        case 7:\n          this.setTileImmediateMovable(tile, [3, 6, 11]);\n          this.setTileColumnMovable(tile, [3, 11, 15]);\n          this.setTileRowMovable(tile, [4, 5, 6]);\n          break;\n        case 8:\n          this.setTileImmediateMovable(tile, [4, 9, 12]);\n          this.setTileColumnMovable(tile, [0, 4, 12]);\n          this.setTileRowMovable(tile, [9, 10, 11]);\n          break;\n        case 9:\n          this.setTileImmediateMovable(tile, [5, 8, 10, 13]);\n          this.setTileColumnMovable(tile, [1, 5, 13]);\n          this.setTileRowMovable(tile, [8, 10, 11]);\n          break;\n        case 10:\n          this.setTileImmediateMovable(tile, [6, 9, 11, 14]);\n          this.setTileColumnMovable(tile, [2, 6, 14]);\n          this.setTileRowMovable(tile, [8, 9, 11]);\n          break;\n        case 11:\n          this.setTileImmediateMovable(tile, [7, 10, 15]);\n          this.setTileColumnMovable(tile, [3, 7, 15]);\n          this.setTileRowMovable(tile, [8, 9, 10]);\n          break;\n        case 12:\n          this.setTileImmediateMovable(tile, [8, 13]);\n          this.setTileColumnMovable(tile, [0, 4, 8]);\n          this.setTileRowMovable(tile, [13, 14, 15]);\n          break;\n        case 13:\n          this.setTileImmediateMovable(tile, [9, 12, 14]);\n          this.setTileColumnMovable(tile, [1, 5, 9]);\n          this.setTileRowMovable(tile, [12, 14, 15]);\n          break;\n        case 14:\n          this.setTileImmediateMovable(tile, [10, 13, 15]);\n          this.setTileColumnMovable(tile, [2, 6, 10]);\n          this.setTileRowMovable(tile, [12, 13, 15]);\n          break;\n        case 15:\n          this.setTileImmediateMovable(tile, [11, 14]);\n          this.setTileColumnMovable(tile, [3, 7, 11]);\n          this.setTileRowMovable(tile, [12, 13, 14]);\n          break;\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}