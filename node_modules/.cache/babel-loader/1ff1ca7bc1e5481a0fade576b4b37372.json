{"ast":null,"code":"var _jsxFileName = \"/home/alynux/GitHub/fifteen-puzzle/src/components/GridSquare.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gridSquareStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  width: \"75px\",\n  height: \"75px\",\n  boxShadow: \"1px 1px 5px gray\"\n};\nconst gridSquareImmediateStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  width: \"75px\",\n  height: \"75px\",\n  boxShadow: \"1px 1px 5px gray\",\n  backgroundColor: \"green\"\n};\nconst gridSquareDistantStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  width: \"75px\",\n  height: \"75px\",\n  boxShadow: \"1px 1px 5px gray\",\n  backgroundColor: \"pink\"\n};\n\nconst GridSquare = _ref => {\n  let {\n    tile,\n    mutableGame,\n    setGameState\n  } = _ref;\n\n  const immediateMove = () => {\n    // Function for moving tiles that are immediately adjacent to the empty tile\n    mutableGame.board.immediateMove(tile);\n    setGameState([...mutableGame.board.boardState]);\n  };\n\n  const complexMove = () => {\n    // Function for moving tiles involving pushing more than one block\n    mutableGame.board.complexMove(tile);\n    setGameState([...mutableGame.board.boardState]);\n  };\n\n  if (tile.number === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: gridSquareStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  } else if (tile.immediateMovable || tile.columnMovable || tile.rowMovable) {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: tile.immediateMovable ? immediateMove : complexMove,\n      style: tile.immediateMovable ? gridSquareImmediateStyle : gridSquareDistantStyle,\n      children: tile.number\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: gridSquareStyle,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: tile.number\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_c = GridSquare;\nexport default GridSquare;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridSquare\");","map":{"version":3,"sources":["/home/alynux/GitHub/fifteen-puzzle/src/components/GridSquare.js"],"names":["React","gridSquareStyle","display","flexDirection","justifyContent","textAlign","width","height","boxShadow","gridSquareImmediateStyle","backgroundColor","gridSquareDistantStyle","GridSquare","tile","mutableGame","setGameState","immediateMove","board","boardState","complexMove","number","immediateMovable","columnMovable","rowMovable"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,eAAoC,GAAG;AAC3CC,EAAAA,OAAO,EAAE,MADkC;AAE3CC,EAAAA,aAAa,EAAE,QAF4B;AAG3CC,EAAAA,cAAc,EAAE,QAH2B;AAI3CC,EAAAA,SAAS,EAAE,QAJgC;AAK3CC,EAAAA,KAAK,EAAE,MALoC;AAM3CC,EAAAA,MAAM,EAAE,MANmC;AAO3CC,EAAAA,SAAS,EAAE;AAPgC,CAA7C;AAUA,MAAMC,wBAA6C,GAAG;AACpDP,EAAAA,OAAO,EAAE,MAD2C;AAEpDC,EAAAA,aAAa,EAAE,QAFqC;AAGpDC,EAAAA,cAAc,EAAE,QAHoC;AAIpDC,EAAAA,SAAS,EAAE,QAJyC;AAKpDC,EAAAA,KAAK,EAAE,MAL6C;AAMpDC,EAAAA,MAAM,EAAE,MAN4C;AAOpDC,EAAAA,SAAS,EAAE,kBAPyC;AAQpDE,EAAAA,eAAe,EAAE;AARmC,CAAtD;AAWA,MAAMC,sBAA2C,GAAG;AAClDT,EAAAA,OAAO,EAAE,MADyC;AAElDC,EAAAA,aAAa,EAAE,QAFmC;AAGlDC,EAAAA,cAAc,EAAE,QAHkC;AAIlDC,EAAAA,SAAS,EAAE,QAJuC;AAKlDC,EAAAA,KAAK,EAAE,MAL2C;AAMlDC,EAAAA,MAAM,EAAE,MAN0C;AAOlDC,EAAAA,SAAS,EAAE,kBAPuC;AAQlDE,EAAAA,eAAe,EAAE;AARiC,CAApD;;AAiBA,MAAME,UAAU,GAAG,QAAyD;AAAA,MAAxD;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,WAAR;AAAqBC,IAAAA;AAArB,GAAwD;;AAC1E,QAAMC,aAAa,GAAG,MAAM;AAC1B;AACAF,IAAAA,WAAW,CAACG,KAAZ,CAAkBD,aAAlB,CAAgCH,IAAhC;AACAE,IAAAA,YAAY,CAAC,CAAC,GAAGD,WAAW,CAACG,KAAZ,CAAkBC,UAAtB,CAAD,CAAZ;AACD,GAJD;;AAMA,QAAMC,WAAW,GAAG,MAAM;AACxB;AACAL,IAAAA,WAAW,CAACG,KAAZ,CAAkBE,WAAlB,CAA8BN,IAA9B;AACAE,IAAAA,YAAY,CAAC,CAAC,GAAGD,WAAW,CAACG,KAAZ,CAAkBC,UAAtB,CAAD,CAAZ;AACD,GAJD;;AAMA,MAAIL,IAAI,CAACO,MAAL,KAAgB,CAApB,EAAuB;AACrB,wBAAO;AAAK,MAAA,KAAK,EAAEnB;AAAZ;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAIY,IAAI,CAACQ,gBAAL,IAAyBR,IAAI,CAACS,aAA9B,IAA+CT,IAAI,CAACU,UAAxD,EAAoE;AACzE,wBACE;AACE,MAAA,OAAO,EAAEV,IAAI,CAACQ,gBAAL,GAAwBL,aAAxB,GAAwCG,WADnD;AAEE,MAAA,KAAK,EACHN,IAAI,CAACQ,gBAAL,GACIZ,wBADJ,GAEIE,sBALR;AAAA,gBAQGE,IAAI,CAACO;AARR;AAAA;AAAA;AAAA;AAAA,YADF;AAYD,GAbM,MAaA;AACL,wBACE;AAAK,MAAA,KAAK,EAAEnB,eAAZ;AAAA,6BACE;AAAA,kBAAIY,IAAI,CAACO;AAAT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;AACF,CAnCD;;KAAMR,U;AAqCN,eAAeA,UAAf","sourcesContent":["import React from \"react\";\n\nconst gridSquareStyle: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  width: \"75px\",\n  height: \"75px\",\n  boxShadow: \"1px 1px 5px gray\",\n};\n\nconst gridSquareImmediateStyle: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  width: \"75px\",\n  height: \"75px\",\n  boxShadow: \"1px 1px 5px gray\",\n  backgroundColor: \"green\",\n};\n\nconst gridSquareDistantStyle: React.CSSProperties = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  width: \"75px\",\n  height: \"75px\",\n  boxShadow: \"1px 1px 5px gray\",\n  backgroundColor: \"pink\",\n};\n\nexport type GridSquareData = {\n  tile: any,\n  mutableGame: any,\n  setGameState: any,\n};\n\nconst GridSquare = ({ tile, mutableGame, setGameState }: GridSquareData) => {\n  const immediateMove = () => {\n    // Function for moving tiles that are immediately adjacent to the empty tile\n    mutableGame.board.immediateMove(tile);\n    setGameState([...mutableGame.board.boardState]);\n  };\n\n  const complexMove = () => {\n    // Function for moving tiles involving pushing more than one block\n    mutableGame.board.complexMove(tile);\n    setGameState([...mutableGame.board.boardState]);\n  };\n\n  if (tile.number === 0) {\n    return <div style={gridSquareStyle}></div>;\n  } else if (tile.immediateMovable || tile.columnMovable || tile.rowMovable) {\n    return (\n      <button\n        onClick={tile.immediateMovable ? immediateMove : complexMove}\n        style={\n          tile.immediateMovable\n            ? gridSquareImmediateStyle\n            : gridSquareDistantStyle\n        }\n      >\n        {tile.number}\n      </button>\n    );\n  } else {\n    return (\n      <div style={gridSquareStyle}>\n        <p>{tile.number}</p>\n      </div>\n    );\n  }\n};\n\nexport default GridSquare;\n"]},"metadata":{},"sourceType":"module"}