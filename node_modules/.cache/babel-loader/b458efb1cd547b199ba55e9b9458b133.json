{"ast":null,"code":"import TileObject from \"./tile\";\nexport default class BoardObject {\n  constructor() {\n    this.boardState = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].flatMap(i => new TileObject(i, i));\n  } // Fisher-Yates shuffle algorithm\n\n\n  scrambleTiles() {\n    const boardTiles = [...this.boardState];\n    let currentIndex = boardTiles.length,\n        placeholderTile,\n        randomIndex; // While elements exist to shuffle\n\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex--); // Change board tile indeces\n\n      boardTiles[currentIndex].setPosition(randomIndex);\n      boardTiles[randomIndex].setPosition(currentIndex); // Swap board tile positions in boardState list\n\n      placeholderTile = boardTiles[currentIndex];\n      boardTiles[currentIndex] = boardTiles[randomIndex];\n      boardTiles[randomIndex] = placeholderTile;\n    }\n\n    this.boardState = boardTiles;\n  }\n\n  setTileImmediateMovable(tile, indices) {\n    console.log(indices);\n    indices.forEach(i => {\n      if (this.boardState[i].empty) {\n        console.log(i);\n        tile.setImmediateMovable(true);\n        return;\n      } else {\n        tile.setImmediateMovable(false);\n      }\n    });\n  }\n\n  setTileColumnMovable(tile, indices) {\n    indices.forEach(i => {\n      if (this.boardState[i].empty) {\n        tile.setColumnMovable(true);\n        return;\n      } else {\n        tile.setColumnMovable(false);\n      }\n    });\n  }\n\n  setTileRowMovable(tile, indices) {\n    indices.forEach(i => {\n      if (this.boardState[i].empty) {\n        tile.setRowMovable(true);\n        return;\n      } else {\n        tile.setRowMovable(false);\n      }\n    });\n  } // Determine movability\n\n\n  setMovableTiles() {\n    this.boardState.forEach(tile => {\n      tile.setImmediateMovable(true);\n\n      switch (tile.position) {\n        case 0:\n          this.setTileImmediateMovable(tile, [1, 4]);\n          this.setTileColumnMovable(tile, [4, 8, 12]);\n          this.setTileRowMovable(tile, [1, 2, 3]);\n          break;\n\n        case 1:\n          this.setTileImmediateMovable(tile, [0, 2, 5]);\n          this.setTileColumnMovable(tile, [5, 9, 13]);\n          this.setTileRowMovable(tile, [0, 2, 3]);\n          break;\n\n        case 2:\n          this.setTileImmediateMovable(tile, [1, 3, 6]);\n          this.setTileColumnMovable(tile, [6, 10, 14]);\n          this.setTileRowMovable(tile, [0, 1, 3]);\n          break;\n\n        case 3:\n          this.setTileImmediateMovable(tile, [2, 7]);\n          this.setTileColumnMovable(tile, [7, 11, 15]);\n          this.setTileRowMovable(tile, [0, 1, 2]);\n          break;\n\n        case 4:\n          this.setTileImmediateMovable(tile, [0, 5, 8]);\n          this.setTileColumnMovable(tile, [0, 8, 12]);\n          this.setTileRowMovable(tile, [5, 6, 7]);\n          break;\n\n        case 5:\n          this.setTileImmediateMovable(tile, [1, 4, 6, 9]);\n          this.setTileColumnMovable(tile, [1, 9, 13]);\n          this.setTileRowMovable(tile, [4, 6, 7]);\n          break;\n\n        case 6:\n          this.setTileImmediateMovable(tile, [2, 5, 7, 10]);\n          this.setTileColumnMovable(tile, [2, 10, 14]);\n          this.setTileRowMovable(tile, [4, 5, 7]);\n          break;\n\n        case 7:\n          this.setTileImmediateMovable(tile, [3, 6, 11]);\n          this.setTileColumnMovable(tile, [3, 11, 15]);\n          this.setTileRowMovable(tile, [4, 5, 6]);\n          break;\n\n        case 8:\n          this.setTileImmediateMovable(tile, [4, 9, 12]);\n          this.setTileColumnMovable(tile, [0, 4, 12]);\n          this.setTileRowMovable(tile, [9, 10, 11]);\n          break;\n\n        case 9:\n          this.setTileImmediateMovable(tile, [5, 8, 10, 13]);\n          this.setTileColumnMovable(tile, [1, 5, 13]);\n          this.setTileRowMovable(tile, [8, 10, 11]);\n          break;\n\n        case 10:\n          this.setTileImmediateMovable(tile, [6, 9, 11, 14]);\n          this.setTileColumnMovable(tile, [2, 6, 14]);\n          this.setTileRowMovable(tile, [8, 9, 11]);\n          break;\n\n        case 11:\n          this.setTileImmediateMovable(tile, [7, 10, 15]);\n          this.setTileColumnMovable(tile, [3, 7, 15]);\n          this.setTileRowMovable(tile, [8, 9, 10]);\n          break;\n\n        case 12:\n          this.setTileImmediateMovable(tile, [8, 13]);\n          this.setTileColumnMovable(tile, [0, 4, 8]);\n          this.setTileRowMovable(tile, [13, 14, 15]);\n          break;\n\n        case 13:\n          this.setTileImmediateMovable(tile, [9, 12, 14]);\n          this.setTileColumnMovable(tile, [1, 5, 9]);\n          this.setTileRowMovable(tile, [12, 14, 15]);\n          break;\n\n        case 14:\n          this.setTileImmediateMovable(tile, [10, 13, 15]);\n          this.setTileColumnMovable(tile, [2, 6, 10]);\n          this.setTileRowMovable(tile, [12, 13, 15]);\n          break;\n\n        case 15:\n          this.setTileImmediateMovable(tile, [11, 14]);\n          this.setTileColumnMovable(tile, [3, 7, 11]);\n          this.setTileRowMovable(tile, [12, 13, 14]);\n          break;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/alynux/GitHub/fifteen-puzzle/src/classes/board.js"],"names":["TileObject","BoardObject","constructor","boardState","flatMap","i","scrambleTiles","boardTiles","currentIndex","length","placeholderTile","randomIndex","Math","floor","random","setPosition","setTileImmediateMovable","tile","indices","console","log","forEach","empty","setImmediateMovable","setTileColumnMovable","setColumnMovable","setTileRowMovable","setRowMovable","setMovableTiles","position"],"mappings":"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","sourcesContent":["import TileObject from \"./tile\";\n\nexport default class BoardObject {\n  constructor() {\n    this.boardState = [\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    ].flatMap((i) => new TileObject(i, i));\n  }\n\n  // Fisher-Yates shuffle algorithm\n  scrambleTiles() {\n    const boardTiles = [...this.boardState];\n    let currentIndex = boardTiles.length,\n      placeholderTile,\n      randomIndex;\n\n    // While elements exist to shuffle\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex--);\n\n      // Change board tile indeces\n      boardTiles[currentIndex].setPosition(randomIndex);\n      boardTiles[randomIndex].setPosition(currentIndex);\n\n      // Swap board tile positions in boardState list\n      placeholderTile = boardTiles[currentIndex];\n      boardTiles[currentIndex] = boardTiles[randomIndex];\n      boardTiles[randomIndex] = placeholderTile;\n    }\n\n    this.boardState = boardTiles;\n  }\n\n  setTileImmediateMovable(tile, indices) {\n    console.log(indices);\n    indices.forEach((i) => {\n      if (this.boardState[i].empty) {\n        console.log(i);\n        tile.setImmediateMovable(true);\n        return;\n      } else {\n        tile.setImmediateMovable(false);\n      }\n    });\n  }\n\n  setTileColumnMovable(tile, indices) {\n    indices.forEach((i) => {\n      if (this.boardState[i].empty) {\n        tile.setColumnMovable(true);\n        return;\n      } else {\n        tile.setColumnMovable(false);\n      }\n    });\n  }\n\n  setTileRowMovable(tile, indices) {\n    indices.forEach((i) => {\n      if (this.boardState[i].empty) {\n        tile.setRowMovable(true);\n        return;\n      } else {\n        tile.setRowMovable(false);\n      }\n    });\n  }\n\n  // Determine movability\n  setMovableTiles() {\n    this.boardState.forEach((tile) => {\n      tile.setImmediateMovable(true);\n      switch (tile.position) {\n        case 0:\n          this.setTileImmediateMovable(tile, [1, 4]);\n          this.setTileColumnMovable(tile, [4, 8, 12]);\n          this.setTileRowMovable(tile, [1, 2, 3]);\n          break;\n        case 1:\n          this.setTileImmediateMovable(tile, [0, 2, 5]);\n          this.setTileColumnMovable(tile, [5, 9, 13]);\n          this.setTileRowMovable(tile, [0, 2, 3]);\n          break;\n        case 2:\n          this.setTileImmediateMovable(tile, [1, 3, 6]);\n          this.setTileColumnMovable(tile, [6, 10, 14]);\n          this.setTileRowMovable(tile, [0, 1, 3]);\n          break;\n        case 3:\n          this.setTileImmediateMovable(tile, [2, 7]);\n          this.setTileColumnMovable(tile, [7, 11, 15]);\n          this.setTileRowMovable(tile, [0, 1, 2]);\n          break;\n        case 4:\n          this.setTileImmediateMovable(tile, [0, 5, 8]);\n          this.setTileColumnMovable(tile, [0, 8, 12]);\n          this.setTileRowMovable(tile, [5, 6, 7]);\n          break;\n        case 5:\n          this.setTileImmediateMovable(tile, [1, 4, 6, 9]);\n          this.setTileColumnMovable(tile, [1, 9, 13]);\n          this.setTileRowMovable(tile, [4, 6, 7]);\n          break;\n        case 6:\n          this.setTileImmediateMovable(tile, [2, 5, 7, 10]);\n          this.setTileColumnMovable(tile, [2, 10, 14]);\n          this.setTileRowMovable(tile, [4, 5, 7]);\n          break;\n        case 7:\n          this.setTileImmediateMovable(tile, [3, 6, 11]);\n          this.setTileColumnMovable(tile, [3, 11, 15]);\n          this.setTileRowMovable(tile, [4, 5, 6]);\n          break;\n        case 8:\n          this.setTileImmediateMovable(tile, [4, 9, 12]);\n          this.setTileColumnMovable(tile, [0, 4, 12]);\n          this.setTileRowMovable(tile, [9, 10, 11]);\n          break;\n        case 9:\n          this.setTileImmediateMovable(tile, [5, 8, 10, 13]);\n          this.setTileColumnMovable(tile, [1, 5, 13]);\n          this.setTileRowMovable(tile, [8, 10, 11]);\n          break;\n        case 10:\n          this.setTileImmediateMovable(tile, [6, 9, 11, 14]);\n          this.setTileColumnMovable(tile, [2, 6, 14]);\n          this.setTileRowMovable(tile, [8, 9, 11]);\n          break;\n        case 11:\n          this.setTileImmediateMovable(tile, [7, 10, 15]);\n          this.setTileColumnMovable(tile, [3, 7, 15]);\n          this.setTileRowMovable(tile, [8, 9, 10]);\n          break;\n        case 12:\n          this.setTileImmediateMovable(tile, [8, 13]);\n          this.setTileColumnMovable(tile, [0, 4, 8]);\n          this.setTileRowMovable(tile, [13, 14, 15]);\n          break;\n        case 13:\n          this.setTileImmediateMovable(tile, [9, 12, 14]);\n          this.setTileColumnMovable(tile, [1, 5, 9]);\n          this.setTileRowMovable(tile, [12, 14, 15]);\n          break;\n        case 14:\n          this.setTileImmediateMovable(tile, [10, 13, 15]);\n          this.setTileColumnMovable(tile, [2, 6, 10]);\n          this.setTileRowMovable(tile, [12, 13, 15]);\n          break;\n        case 15:\n          this.setTileImmediateMovable(tile, [11, 14]);\n          this.setTileColumnMovable(tile, [3, 7, 11]);\n          this.setTileRowMovable(tile, [12, 13, 14]);\n          break;\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}