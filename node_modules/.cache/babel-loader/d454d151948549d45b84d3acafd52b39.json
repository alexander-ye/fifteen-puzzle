{"ast":null,"code":"import TileObject from \"./tile\";\nexport default class BoardObject {\n  constructor() {\n    this.boardState = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].flatMap(i => new TileObject(i, i));\n  } // Fisher-Yates shuffle algorithm\n\n\n  scrambleTiles() {\n    const boardTiles = [...this.boardState];\n    let currentIndex = boardTiles.length,\n        placeholderTile,\n        randomIndex; // While elements exist to shuffle\n\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex--); // Change board tile indeces\n\n      boardTiles[currentIndex].setPosition(randomIndex);\n      boardTiles[randomIndex].setPosition(currentIndex); // Swap board tile positions in boardState list\n\n      placeholderTile = boardTiles[currentIndex];\n      boardTiles[currentIndex] = boardTiles[randomIndex];\n      boardTiles[randomIndex] = placeholderTile;\n    }\n\n    this.boardState = boardTiles;\n  }\n\n  detectEmpty(tile) {\n    if (tile.number === 0) {\n      return true;\n    }\n  }\n\n  setTileImmediateMovable(iArray) {\n    iArray.forEach(i => {\n      const tile = this.boardState[i];\n\n      if (this.detectEmpty(tile)) {\n        tile.setImmediateMovable(true);\n        return;\n      } else {\n        tile.setImmediateMovable(false);\n      }\n    });\n  }\n\n  setTileColumnMovable(iArray) {\n    iArray.forEach(i => {\n      const tile = this.boardState[i];\n\n      if (this.detectEmpty(tile)) {\n        tile.setColumnMovable(true);\n        return;\n      } else {\n        tile.setColumnMovable(false);\n      }\n    });\n  }\n\n  setTileRowMovable(iArray) {\n    iArray.forEach(i => {\n      const tile = this.boardState[i];\n\n      if (this.detectEmpty(tile)) {\n        tile.setRowMovable(true);\n        return;\n      } else {\n        tile.setRowMovable(false);\n      }\n    });\n  } // Determine movability\n\n\n  setMovableTiles() {\n    this.boardState.forEach(tile => {\n      switch (tile.position) {\n        case 0:\n          this.setTileImmediateMovable([1, 4]);\n          this.setTileColumnMovable([4, 8, 12]);\n          this.setTileRowMovable(1, 2, 3);\n          break;\n\n        case 1:\n          this.setTileImmediateMovable([0, 2, 5]);\n          this.setTileColumnMovable([5, 9, 13]);\n          this.setTileRowMovable(0, 2, 3);\n          break;\n\n        case 2:\n          this.setTileImmediateMovable([1, 3, 6]);\n          this.setTileColumnMovable([6, 10, 14]);\n          this.setTileRowMovable(0, 1, 3);\n          break;\n\n        case 3:\n          this.setTileImmediateMovable([2, 7]);\n          this.setTileColumnMovable([7, 11, 15]);\n          this.setTileRowMovable(0, 1, 2);\n          break;\n\n        case 4:\n          this.setTileImmediateMovable([0, 5, 8]);\n          this.setTileColumnMovable([0, 8, 12]);\n          this.setTileRowMovable(5, 6, 7);\n          break;\n\n        case 5:\n          this.setTileImmediateMovable([1, 4, 6, 9]);\n          this.setTileColumnMovable([1, 9, 13]);\n          this.setTileRowMovable(4, 6, 7);\n          break;\n\n        case 6:\n          this.setTileImmediateMovable([2, 5, 7, 10]);\n          this.setTileColumnMovable([2, 10, 14]);\n          this.setTileRowMovable(4, 5, 7);\n          break;\n\n        case 7:\n          this.setTileImmediateMovable([3, 6, 11]);\n          this.setTileColumnMovable([3, 11, 15]);\n          this.setTileRowMovable(4, 5, 6);\n          break;\n\n        case 8:\n          this.setTileImmediateMovable([4, 9, 12]);\n          this.setTileColumnMovable([0, 4, 12]);\n          this.setTileRowMovable(9, 10, 11);\n          break;\n\n        case 9:\n          this.setTileImmediateMovable([5, 8, 10, 13]);\n          this.setTileColumnMovable([1, 5, 13]);\n          this.setTileRowMovable(8, 10, 11);\n          break;\n\n        case 10:\n          this.setTileImmediateMovable([6, 9, 11, 14]);\n          this.setTileColumnMovable([2, 6, 14]);\n          this.setTileRowMovable(8, 9, 11);\n          break;\n\n        case 11:\n          this.setTileImmediateMovable([7, 10, 15]);\n          this.setTileColumnMovable([3, 7, 15]);\n          this.setTileRowMovable(8, 9, 10);\n          break;\n\n        case 12:\n          this.setTileImmediateMovable([8, 13]);\n          this.setTileColumnMovable([0, 4, 8]);\n          this.setTileRowMovable(13, 14, 15);\n          break;\n\n        case 13:\n          this.setTileImmediateMovable([9, 12, 14]);\n          this.setTileColumnMovable([1, 5, 9]);\n          this.setTileRowMovable(12, 14, 15);\n          break;\n\n        case 14:\n          this.setTileImmediateMovable([10, 13, 15]);\n          this.setTileColumnMovable([2, 6, 10]);\n          this.setTileRowMovable(12, 13, 15);\n          break;\n\n        case 15:\n          this.setTileImmediateMovable([11, 14]);\n          this.setTileColumnMovable([3, 7, 11]);\n          this.setTileRowMovable(12, 13, 14);\n          break;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/alynux/GitHub/fifteen-puzzle/src/classes/board.js"],"names":["TileObject","BoardObject","constructor","boardState","flatMap","i","scrambleTiles","boardTiles","currentIndex","length","placeholderTile","randomIndex","Math","floor","random","setPosition","detectEmpty","tile","number","setTileImmediateMovable","iArray","forEach","setImmediateMovable","setTileColumnMovable","setColumnMovable","setTileRowMovable","setRowMovable","setMovableTiles","position"],"mappings":"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","sourcesContent":["import TileObject from \"./tile\";\n\nexport default class BoardObject {\n  constructor() {\n    this.boardState = [\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    ].flatMap((i) => new TileObject(i, i));\n  }\n\n  // Fisher-Yates shuffle algorithm\n  scrambleTiles() {\n    const boardTiles = [...this.boardState];\n    let currentIndex = boardTiles.length,\n      placeholderTile,\n      randomIndex;\n\n    // While elements exist to shuffle\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex--);\n\n      // Change board tile indeces\n      boardTiles[currentIndex].setPosition(randomIndex);\n      boardTiles[randomIndex].setPosition(currentIndex);\n\n      // Swap board tile positions in boardState list\n      placeholderTile = boardTiles[currentIndex];\n      boardTiles[currentIndex] = boardTiles[randomIndex];\n      boardTiles[randomIndex] = placeholderTile;\n    }\n\n    this.boardState = boardTiles;\n  }\n\n  detectEmpty(tile) {\n    if (tile.number === 0) {\n      return true;\n    }\n  }\n\n  setTileImmediateMovable(iArray) {\n    iArray.forEach((i) => {\n      const tile = this.boardState[i];\n      if (this.detectEmpty(tile)) {\n        tile.setImmediateMovable(true);\n        return;\n      } else {\n        tile.setImmediateMovable(false);\n      }\n    });\n  }\n\n  setTileColumnMovable(iArray) {\n    iArray.forEach((i) => {\n      const tile = this.boardState[i];\n      if (this.detectEmpty(tile)) {\n        tile.setColumnMovable(true);\n        return;\n      } else {\n        tile.setColumnMovable(false);\n      }\n    });\n  }\n\n  setTileRowMovable(iArray) {\n    iArray.forEach((i) => {\n      const tile = this.boardState[i];\n      if (this.detectEmpty(tile)) {\n        tile.setRowMovable(true);\n        return;\n      } else {\n        tile.setRowMovable(false);\n      }\n    });\n  }\n\n  // Determine movability\n  setMovableTiles() {\n    this.boardState.forEach((tile) => {\n      switch (tile.position) {\n        case 0:\n          this.setTileImmediateMovable([1, 4]);\n          this.setTileColumnMovable([4, 8, 12]);\n          this.setTileRowMovable(1, 2, 3);\n          break;\n        case 1:\n          this.setTileImmediateMovable([0, 2, 5]);\n          this.setTileColumnMovable([5, 9, 13]);\n          this.setTileRowMovable(0, 2, 3);\n          break;\n        case 2:\n          this.setTileImmediateMovable([1, 3, 6]);\n          this.setTileColumnMovable([6, 10, 14]);\n          this.setTileRowMovable(0, 1, 3);\n          break;\n        case 3:\n          this.setTileImmediateMovable([2, 7]);\n          this.setTileColumnMovable([7, 11, 15]);\n          this.setTileRowMovable(0, 1, 2);\n          break;\n        case 4:\n          this.setTileImmediateMovable([0, 5, 8]);\n          this.setTileColumnMovable([0, 8, 12]);\n          this.setTileRowMovable(5, 6, 7);\n          break;\n        case 5:\n          this.setTileImmediateMovable([1, 4, 6, 9]);\n          this.setTileColumnMovable([1, 9, 13]);\n          this.setTileRowMovable(4, 6, 7);\n          break;\n        case 6:\n          this.setTileImmediateMovable([2, 5, 7, 10]);\n          this.setTileColumnMovable([2, 10, 14]);\n          this.setTileRowMovable(4, 5, 7);\n          break;\n        case 7:\n          this.setTileImmediateMovable([3, 6, 11]);\n          this.setTileColumnMovable([3, 11, 15]);\n          this.setTileRowMovable(4, 5, 6);\n          break;\n        case 8:\n          this.setTileImmediateMovable([4, 9, 12]);\n          this.setTileColumnMovable([0, 4, 12]);\n          this.setTileRowMovable(9, 10, 11);\n          break;\n        case 9:\n          this.setTileImmediateMovable([5, 8, 10, 13]);\n          this.setTileColumnMovable([1, 5, 13]);\n          this.setTileRowMovable(8, 10, 11);\n          break;\n        case 10:\n          this.setTileImmediateMovable([6, 9, 11, 14]);\n          this.setTileColumnMovable([2, 6, 14]);\n          this.setTileRowMovable(8, 9, 11);\n          break;\n        case 11:\n          this.setTileImmediateMovable([7, 10, 15]);\n          this.setTileColumnMovable([3, 7, 15]);\n          this.setTileRowMovable(8, 9, 10);\n          break;\n        case 12:\n          this.setTileImmediateMovable([8, 13]);\n          this.setTileColumnMovable([0, 4, 8]);\n          this.setTileRowMovable(13, 14, 15);\n          break;\n        case 13:\n          this.setTileImmediateMovable([9, 12, 14]);\n          this.setTileColumnMovable([1, 5, 9]);\n          this.setTileRowMovable(12, 14, 15);\n          break;\n        case 14:\n          this.setTileImmediateMovable([10, 13, 15]);\n          this.setTileColumnMovable([2, 6, 10]);\n          this.setTileRowMovable(12, 13, 15);\n          break;\n        case 15:\n          this.setTileImmediateMovable([11, 14]);\n          this.setTileColumnMovable([3, 7, 11]);\n          this.setTileRowMovable(12, 13, 14);\n          break;\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}