{"ast":null,"code":"import TileObject from \"./tile\";\nexport default class BoardObject {\n  constructor() {\n    this.boardState = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].flatMap(i => new TileObject(i, i));\n  } // Fisher-Yates shuffle algorithm\n\n\n  scrambleTiles() {\n    const boardTiles = [...this.boardState];\n    let currentIndex = boardTiles.length,\n        placeholderTile,\n        randomIndex; // While elements exist to shuffle\n\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex--); // Change board tile indeces\n\n      boardTiles[currentIndex].setPosition(randomIndex);\n      boardTiles[randomIndex].setPosition(currentIndex); // Swap board tile positions in boardState list\n\n      placeholderTile = boardTiles[currentIndex];\n      boardTiles[currentIndex] = boardTiles[randomIndex];\n      boardTiles[randomIndex] = placeholderTile;\n    }\n\n    this.boardState = boardTiles;\n  }\n\n  immediateMove(tileToMove) {\n    console.log(tileToMove); // const emptyTile = this.boardState.find((tile) => tile.number === 0);\n    // const oldPosition = tileToMove.position;\n    // this.boardState = this.boardState.map((tile) => {\n    //   if (tile.position === oldPosition) {\n    //     console.log(tile);\n    //     tile.setPosition(emptyTile.position);\n    //     emptyTile.setPosition(oldPosition);\n    //   }\n    // });\n\n    this.setMovableTiles();\n  }\n\n  detectMovableTiles() {\n    const boardTiles = [...this.boardState];\n    const emptyTile = boardTiles.find(tile => tile.empty);\n    let immediateMovableTiles;\n    let columnMovableTiles;\n    let rowMovableTiles;\n\n    switch (emptyTile.position) {\n      case 0:\n        immediateMovableTiles = [1, 4];\n        columnMovableTiles = [4, 8, 12];\n        rowMovableTiles = [1, 2, 3];\n        break;\n\n      case 1:\n        immediateMovableTiles = [0, 2, 5];\n        columnMovableTiles = [5, 9, 13];\n        rowMovableTiles = [0, 2, 3];\n        break;\n\n      case 2:\n        immediateMovableTiles = [1, 3, 6];\n        columnMovableTiles = [6, 10, 14];\n        rowMovableTiles = [0, 1, 3];\n        break;\n\n      case 3:\n        immediateMovableTiles = [2, 7];\n        columnMovableTiles = [7, 11, 15];\n        rowMovableTiles = [0, 1, 2];\n        break;\n\n      case 4:\n        immediateMovableTiles = [0, 5, 8];\n        columnMovableTiles = [0, 8, 12];\n        rowMovableTiles = [5, 6, 7];\n        break;\n\n      case 5:\n        immediateMovableTiles = [1, 4, 6, 9];\n        columnMovableTiles = [1, 9, 13];\n        rowMovableTiles = [4, 6, 7];\n        break;\n\n      case 6:\n        immediateMovableTiles = [2, 5, 7, 10];\n        columnMovableTiles = [2, 10, 14];\n        rowMovableTiles = [4, 5, 7];\n        break;\n\n      case 7:\n        immediateMovableTiles = [3, 6, 11];\n        columnMovableTiles = [3, 11, 15];\n        rowMovableTiles = [4, 5, 6];\n        break;\n\n      case 8:\n        immediateMovableTiles = [4, 9, 12];\n        columnMovableTiles = [0, 4, 12];\n        rowMovableTiles = [9, 10, 11];\n        break;\n\n      case 9:\n        immediateMovableTiles = [5, 8, 10, 13];\n        columnMovableTiles = [1, 5, 13];\n        rowMovableTiles = [8, 10, 11];\n        break;\n\n      case 10:\n        immediateMovableTiles = [6, 9, 11, 14];\n        columnMovableTiles = [2, 6, 14];\n        rowMovableTiles = [8, 9, 11];\n        break;\n\n      case 11:\n        immediateMovableTiles = [7, 10, 15];\n        columnMovableTiles = [3, 7, 15];\n        rowMovableTiles = [8, 9, 10];\n        break;\n\n      case 12:\n        immediateMovableTiles = [8, 13];\n        columnMovableTiles = [0, 4, 8];\n        rowMovableTiles = [13, 14, 15];\n        break;\n\n      case 13:\n        immediateMovableTiles = [9, 12, 14];\n        columnMovableTiles = [1, 5, 9];\n        rowMovableTiles = [12, 14, 15];\n        break;\n\n      case 14:\n        immediateMovableTiles = [10, 13, 15];\n        columnMovableTiles = [2, 6, 10];\n        rowMovableTiles = [12, 13, 15];\n        break;\n\n      case 15:\n        immediateMovableTiles = [11, 14];\n        columnMovableTiles = [3, 7, 11];\n        rowMovableTiles = [12, 13, 14];\n        break;\n    }\n\n    return {\n      immediateMovableTiles: immediateMovableTiles,\n      columnMovableTiles: columnMovableTiles,\n      rowMovableTiles: rowMovableTiles\n    };\n  }\n\n  setMovableTiles() {\n    const movableTiles = this.detectMovableTiles();\n    this.boardState.map(tile => {\n      movableTiles.immediateMovableTiles.forEach(i => {\n        if (tile.position === i) {\n          tile.setImmediateMovable(true);\n        }\n\n        movableTiles.columnMovableTiles.forEach(i => {\n          if (tile.position === i) {\n            tile.setColumnMovable(true);\n          }\n        });\n        movableTiles.rowMovableTiles.forEach(i => {\n          if (tile.position === i) {\n            tile.setRowMovable(true);\n          }\n        });\n      });\n    });\n  }\n\n  clone() {\n    let out = new BoardObject();\n    out.boardState = this.boardState;\n    return out;\n  }\n\n}","map":{"version":3,"sources":["/home/alynux/GitHub/fifteen-puzzle/src/classes/board.js"],"names":["TileObject","BoardObject","constructor","boardState","flatMap","i","scrambleTiles","boardTiles","currentIndex","length","placeholderTile","randomIndex","Math","floor","random","setPosition","immediateMove","tileToMove","console","log","setMovableTiles","detectMovableTiles","emptyTile","find","tile","empty","immediateMovableTiles","columnMovableTiles","rowMovableTiles","position","movableTiles","map","forEach","setImmediateMovable","setColumnMovable","setRowMovable","clone","out"],"mappings":"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","sourcesContent":["import TileObject from \"./tile\";\n\nexport default class BoardObject {\n  constructor() {\n    this.boardState = [\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    ].flatMap((i) => new TileObject(i, i));\n  }\n\n  // Fisher-Yates shuffle algorithm\n  scrambleTiles() {\n    const boardTiles = [...this.boardState];\n    let currentIndex = boardTiles.length,\n      placeholderTile,\n      randomIndex;\n\n    // While elements exist to shuffle\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex--);\n\n      // Change board tile indeces\n      boardTiles[currentIndex].setPosition(randomIndex);\n      boardTiles[randomIndex].setPosition(currentIndex);\n\n      // Swap board tile positions in boardState list\n      placeholderTile = boardTiles[currentIndex];\n      boardTiles[currentIndex] = boardTiles[randomIndex];\n      boardTiles[randomIndex] = placeholderTile;\n    }\n\n    this.boardState = boardTiles;\n  }\n\n  immediateMove(tileToMove) {\n    console.log(tileToMove);\n    // const emptyTile = this.boardState.find((tile) => tile.number === 0);\n    // const oldPosition = tileToMove.position;\n\n    // this.boardState = this.boardState.map((tile) => {\n    //   if (tile.position === oldPosition) {\n    //     console.log(tile);\n    //     tile.setPosition(emptyTile.position);\n    //     emptyTile.setPosition(oldPosition);\n    //   }\n    // });\n    this.setMovableTiles();\n  }\n\n  detectMovableTiles() {\n    const boardTiles = [...this.boardState];\n    const emptyTile = boardTiles.find((tile) => tile.empty);\n    let immediateMovableTiles;\n    let columnMovableTiles;\n    let rowMovableTiles;\n\n    switch (emptyTile.position) {\n      case 0:\n        immediateMovableTiles = [1, 4];\n        columnMovableTiles = [4, 8, 12];\n        rowMovableTiles = [1, 2, 3];\n        break;\n      case 1:\n        immediateMovableTiles = [0, 2, 5];\n        columnMovableTiles = [5, 9, 13];\n        rowMovableTiles = [0, 2, 3];\n        break;\n      case 2:\n        immediateMovableTiles = [1, 3, 6];\n        columnMovableTiles = [6, 10, 14];\n        rowMovableTiles = [0, 1, 3];\n        break;\n      case 3:\n        immediateMovableTiles = [2, 7];\n        columnMovableTiles = [7, 11, 15];\n        rowMovableTiles = [0, 1, 2];\n        break;\n      case 4:\n        immediateMovableTiles = [0, 5, 8];\n        columnMovableTiles = [0, 8, 12];\n        rowMovableTiles = [5, 6, 7];\n        break;\n      case 5:\n        immediateMovableTiles = [1, 4, 6, 9];\n        columnMovableTiles = [1, 9, 13];\n        rowMovableTiles = [4, 6, 7];\n        break;\n      case 6:\n        immediateMovableTiles = [2, 5, 7, 10];\n        columnMovableTiles = [2, 10, 14];\n        rowMovableTiles = [4, 5, 7];\n        break;\n      case 7:\n        immediateMovableTiles = [3, 6, 11];\n        columnMovableTiles = [3, 11, 15];\n        rowMovableTiles = [4, 5, 6];\n        break;\n      case 8:\n        immediateMovableTiles = [4, 9, 12];\n        columnMovableTiles = [0, 4, 12];\n        rowMovableTiles = [9, 10, 11];\n        break;\n      case 9:\n        immediateMovableTiles = [5, 8, 10, 13];\n        columnMovableTiles = [1, 5, 13];\n        rowMovableTiles = [8, 10, 11];\n        break;\n      case 10:\n        immediateMovableTiles = [6, 9, 11, 14];\n        columnMovableTiles = [2, 6, 14];\n        rowMovableTiles = [8, 9, 11];\n        break;\n      case 11:\n        immediateMovableTiles = [7, 10, 15];\n        columnMovableTiles = [3, 7, 15];\n        rowMovableTiles = [8, 9, 10];\n        break;\n      case 12:\n        immediateMovableTiles = [8, 13];\n        columnMovableTiles = [0, 4, 8];\n        rowMovableTiles = [13, 14, 15];\n        break;\n      case 13:\n        immediateMovableTiles = [9, 12, 14];\n        columnMovableTiles = [1, 5, 9];\n        rowMovableTiles = [12, 14, 15];\n        break;\n      case 14:\n        immediateMovableTiles = [10, 13, 15];\n        columnMovableTiles = [2, 6, 10];\n        rowMovableTiles = [12, 13, 15];\n        break;\n      case 15:\n        immediateMovableTiles = [11, 14];\n        columnMovableTiles = [3, 7, 11];\n        rowMovableTiles = [12, 13, 14];\n        break;\n    }\n    return {\n      immediateMovableTiles: immediateMovableTiles,\n      columnMovableTiles: columnMovableTiles,\n      rowMovableTiles: rowMovableTiles,\n    };\n  }\n\n  setMovableTiles() {\n    const movableTiles = this.detectMovableTiles();\n\n    this.boardState.map((tile) => {\n      movableTiles.immediateMovableTiles.forEach((i) => {\n        if (tile.position === i) {\n          tile.setImmediateMovable(true);\n        }\n        movableTiles.columnMovableTiles.forEach((i) => {\n          if (tile.position === i) {\n            tile.setColumnMovable(true);\n          }\n        });\n        movableTiles.rowMovableTiles.forEach((i) => {\n          if (tile.position === i) {\n            tile.setRowMovable(true);\n          }\n        });\n      });\n    });\n  }\n\n  clone() {\n    let out = new BoardObject();\n    out.boardState = this.boardState;\n    return out;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}